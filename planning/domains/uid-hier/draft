// Navlocation must be warehouse - wh.
action turnValves (Robots r, Valves v, Tools t, NavLocation p, NavLocation wh){
    motivated;
    [start] v.operated == false;
    [all]{
        v.location == p;
        v.need == t;
    };
    :decomposition{
        r.location == p;
        r.tooldock == t;
        [all]{
            s1: locate(r,v,p);
            s2: turn(r,v,t,p);
        };
        end(s1) <= start(s2);
    };
    :decomposition{
        r.location != p;
        r.tooldock == t;
        constant NavLocation prevRloc;
        [all]{
            s1: move(r,prevRloc,p);
            s2: locate(r,v,p);
            s3: turn(r,v,t,p);
        };
        end(s1) <= start(s2);
        end(s2) <= start(s3);
    };
    :decomposition{
        r.tooldock != t;
        [all]{
            s1: preTools(r,wh,t);
            s2: move(r,wh,p);
            s3: locate(r,v,p);
            s4: turn(r,v,t,p);
        };
        end(s1) <= start(s2);
        end(s2) <= start(s3);
        end(s3) <= start(s4);
    };
};


// move the robot from to .
action move (Robots r, NavLocation from, NavLocation to){
    motivated;
    duration := 10; // duration should be estimated (or calculated) based on distance between from and to.
    from != to;
    [all] {
        r.location == from :-> to;
        r.face == from :-> to;
    };
};



// NavLocation must be panel.
action turn (Robots r, Valves tv, Tools tt, NavLocation tp){
    motivated;
    duration := 5; //should be estimated from actual operation.
    [all]{
        r.location == tp;
        tv.location == tp;
        r.tooldock == tt;
        tv.need == tt;
        tv.operated == false :-> true;
        r.face == tv :-> tp;
    };
};

// NavLocation must be a pipeline.
action track (Robots r, NavLocation pips, NavLocation pipe) {
    motivated;
    duration := 10; // should be estimated based on the uid speed and pipeline length.
    [all]{
        r.location == pips :-> pipe;
    };
};

// NavLocation must be a pipeline.
action track (Robots r, NavLocation pips, NavLocation pipe) {
    motivated;
    duration := 10; // should be estimated based on the uid speed and pipeline length.
    [all]{
        r.location == pips :-> pipe;
    };
};

////////////////////////////////////////////////////////////////////////////////////////////////////

// inspect valves on the panel.
action inspectValves (Robots r, Valves v, NavLocation a){
    motivated;
    [start] v.inspected == false;
    [all] v.location == a;
    :decomposition{
        r.location != a;
        constant NavLocation prevRloc;
        [all] contains{
            s1: move(r, prevRloc, a);
            s2: locate(r,v,a);
            s3: inspect(r,v,a);
        };
        end(s1) <= start(s2);
        end(s2) <= start(s3);
    };
    :decomposition{
        r.location == a;
        r.face != v;
        [all] contains {
            s1: locate(r,v,a);
            s2: inspect(r,v,a);
        };
        end(s1) <= start(s2);
    };
};



action trackPipeline (Robots r, Pipeline pip) {
    motivated;
    :decomposition{
        r.location == pip;
        [all]{
            track(r,pip);
        };
    };
    :decomposition{
        [start] r.location != pip;
        constant NavLocation prevRloc;// := r.location;
        //prevRloc := r.location;
        [all]{
            move(r,prevRloc,pip);
            track(r,pip);
        };
    };
};

action gototrackPipeline (Robots r, NavLocation pips, NavLocation pipe) {
    motivated;
    :decomposition{
        [start] r.location == pips;
        [all]{
            track(r,pips,pipe);
        };
    };
    :decomposition{
        [start] r.location != pips;
        [all] {
           s1: goto(r,pips);
           s2: track(r,pips,pipe);
        };
        end(s1) <= start(s2);
    };
};






















